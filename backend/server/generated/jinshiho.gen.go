// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Your GET endpoint
	// (GET /projects)
	GetProjects(c *gin.Context)
	// Create New User
	// (POST /users)
	PostUser(c *gin.Context)
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int)
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjects(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PatchUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/projects", wrapper.GetProjects)
	router.POST(options.BaseURL+"/users", wrapper.PostUser)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PATCH(options.BaseURL+"/users/:userId", wrapper.PatchUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+VwhuwF5kW3ayrtHTmuUHjG1pkCYPQxcYtHSymEqkSlJJDcP/+3AkJUu2",
	"kjhJMfQplsS7491933eXFY1lUUoBwmgaraiOMyiY/Xmp5B3EBn+WSpagDAf7IZYJ4F+zLIFGVBvFxYKu",
	"AxorMAySGbNGqVQF/qIJM0CD3eM86fUiWNHnfh1QBV8rriCh0Wc09kcDd6FO+NuAGm5ytK/TaC4g5/Z5",
	"HdAbDQojwTdWlDkm93llbzuT6WzOlcloRMdHR78NxuHgYEwDCgXjOY0oy3kMQ11wk/2+wHfDWBb199k9",
	"KJ5yvKdRFQQ05UqbmcuLfkBT6rIfH04CmrPNx0/okQZU84WoypmtXEQn4fhoEL4fTA7p+jbY7oYCZpqi",
	"J6BjxUvDpaARvc6AoA9iMmaIyYBUGhR5YJp4syENnm/UVkk6BWvX53YPX76CLXi4N48dbRVzO7tPYIiR",
	"BGtMeNqk94sm1pJkTJM5gCC1i+EmylzKHJjAMO3urB5DaTfyjeBfMWgCwqBnRVKp7AUW/B6EvUYrGBcG",
	"FqDQW6vZeyG8dbm2cdBUbatILeBbdO+gHqNwkUob35+840JnPJM0oPegtMtxPAzxwrIEwUpOI3owxFcB",
	"LZnJLPJGpaOWfViAxR8ik2GVpgmN6DmYy/oMJqdLKbSD7SQMnZYIA8KasrLMeWyNR3ca71DLEf7iBgpr",
	"+LOClEb0p9FGuEZetUY119dN2kwptnRZd1v48U9bcA0KU7bMrxRSOzOmjEajXMYsz6Q20UEYhpZ3uioK",
	"ppY0ov/ISpHz02sCIiklF8b6GmHb7R1LqXvY+IelHGFEwEMDkW7BLqU2vm8IBdDmWCbLPQq1YeSqjoN+",
	"yLGckzPIc/mAX+5ZXlnk9YjcO68wG5Gby/kwtbYdjeuo2bGc066E+Wi25Jv2dTVrR1D2l42dL8/Q9wWE",
	"e5Zr3Wvf9nKr23Lsp9UFATFozdSSpBzyRDeC8eFyiiIW72Jj/SrGtIFwAQ9PoqA9OugknISD8Xgwfr+T",
	"6cvwsS3bKcs19MLGjsDJPvB5ivSWLz21t5k7LiRYzENXv+6hv7nWXCzIlccBmQqHRfxsjY52jU7tePmQ",
	"K2DJklyzLyDeICaernWzWlIyWuGfabJuCWz3JldgFId7sFDim6sTmbbGPTeZfSqYiTPM1r6enuzqzzlY",
	"+dE3Nq4Ve8UKMHVW3ejTBOMwQeAb16Z2jF45fsZBUS9pEa1qlxvKue1o0+XtcYl1eiMFzsE4Cti1i7j9",
	"6hkl/JHWve9EgzNZCU+Cw551Bo9cSFMfezWUm2oji8h86R9OMHKJ4OuJXfoFdQe/fbjampbo8ofD62vH",
	"tq/EaT3pGojWKFQwhzhmLQRip7zZGYKOXPhB19h2sHjlHLTN/mLeivxbheHkHTnBtzIlx/Vo7jDlY3rc",
	"8OT9r8iTcOKH5YVXdvalxuHe0//xab/Vv9QPSLffc+3W7WB39a8pSXzkJXngeU7mQLT7p8EOpWHfpvG2",
	"feL5jQAx6wR4UxW8UWUb8j3Gvmtt4sjne05cX56Y/o3m9E3/Vq8fR+N+o78GoZfEg64i9sLn1bLnK7G3",
	"8P0v894zr9HJZtt4mcv1fwEAAP//yuDlP7sRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
